<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
	Microsoft ResX Schema 
	
	Version 2.0
	
	The primary goals of this format is to allow a simple XML format 
	that is mostly human readable. The generation and parsing of the 
	various data types are done through the TypeConverter classes 
	associated with the data types.
	
	Example:
	
	... ado.net/XML headers & schema ...
	<resheader name="resmimetype">text/microsoft-resx</resheader>
	<resheader name="version">2.0</resheader>
	<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	<data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
		<value>[base64 mime encoded serialized .NET Framework object]</value>
	</data>
	<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
		<value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
		<comment>This is a comment</comment>
	</data>
				
	There are any number of "resheader" rows that contain simple 
	name/value pairs.
	
	Each data row contains a name, and value. The row also contains a 
	type or mimetype. Type corresponds to a .NET class that support 
	text/value conversion through the TypeConverter architecture. 
	Classes that don't support this are serialized and stored with the 
	mimetype set.
	
	The mimetype is used for serialized objects, and tells the 
	ResXResourceReader how to depersist the object. This is currently not 
	extensible. For a given mimetype the value must be set accordingly:
	
	Note - application/x-microsoft.net.object.binary.base64 is the format 
	that the ResXResourceWriter will generate, however the reader can 
	read any of the formats listed below.
	
	mimetype: application/x-microsoft.net.object.binary.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.
	
	mimetype: application/x-microsoft.net.object.soap.base64
	value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

	mimetype: application/x-microsoft.net.object.bytearray.base64
	value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
	<xsd:element name="root" msdata:IsDataSet="true">
	  <xsd:complexType>
		<xsd:choice maxOccurs="unbounded">
		  <xsd:element name="metadata">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" />
			  </xsd:sequence>
			  <xsd:attribute name="name" use="required" type="xsd:string" />
			  <xsd:attribute name="type" type="xsd:string" />
			  <xsd:attribute name="mimetype" type="xsd:string" />
			  <xsd:attribute ref="xml:space" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="assembly">
			<xsd:complexType>
			  <xsd:attribute name="alias" type="xsd:string" />
			  <xsd:attribute name="name" type="xsd:string" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="data">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
				<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
			  <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
			  <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
			  <xsd:attribute ref="xml:space" />
			</xsd:complexType>
		  </xsd:element>
		  <xsd:element name="resheader">
			<xsd:complexType>
			  <xsd:sequence>
				<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
			  </xsd:sequence>
			  <xsd:attribute name="name" type="xsd:string" use="required" />
			</xsd:complexType>
		  </xsd:element>
		</xsd:choice>
	  </xsd:complexType>
	</xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
	<value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
	<value>2.0</value>
  </resheader>
  <resheader name="reader">
	<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
	<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Composite" xml:space="preserve">
	<value>Composite</value>
  </data>
  <data name="CompositeConverterSample" xml:space="preserve">
	<value>&lt;Grid.Resources&gt;
	&lt;BooleanConverter x:Key="YesNoConverter" OnTrue="Yes" OnFalse="No"/&gt;
	&lt;SwitchConverter 
		x:Key="CompositeSwitchConverter"
		PostConverter="{StaticResource YesNoConverter}"&gt;
		&lt;Case Key="0" Value="False"/&gt;
		&lt;Case Key="1" Value="True"/&gt;
	&lt;/SwitchConverter&gt;
&lt;/Grid.Resources&gt;
&lt;TextBlock Text="{Binding Number, Converter={StaticResource CompositeSwitchConverter}}"/&gt;</value>
  </data>
  <data name="Converters" xml:space="preserve">
	<value>Converters</value>
  </data>
  <data name="EquitableInjections" xml:space="preserve">
	<value>Equitable Injections</value>
  </data>
  <data name="Evocators" xml:space="preserve">
	<value>Evocators</value>
  </data>
  <data name="Exposable" xml:space="preserve">
	<value>Exposable</value>
  </data>
  <data name="Girl" xml:space="preserve">
	<value>Girl</value>
  </data>
  <data name="GirlSample" xml:space="preserve">
	<value>[DataContract]
	public class GirlViewModel : ContextObject, IExposable
	{
		[DataMember]
		public int Kisses
		{
			get { return Get(() =&gt; Kisses); }
			set { Set(() =&gt; Kisses, value); }
		}

		public void Expose()
		{
			var guyViewModel = Store.Get&lt;GuyViewModel&gt;();

			this[() =&gt; Kisses].PropertyChanged += (sender, args) =&gt;
			{
				Context.Get("KissGirl").RaiseCanExecuteChanged();
				Context.Get("KissGuy").RaiseCanExecuteChanged();
			};

			this[Context.Get("KissGuy")].CanExecute += (sender, args) =&gt;
				args.CanExecute = Kisses &gt; guyViewModel.Kisses - 3;

			this[Context.Get("KissGuy")].Executed += (sender, args) =&gt; 
				guyViewModel.Kisses++;
		}
	}</value>
  </data>
  <data name="Guy" xml:space="preserve">
	<value>Guy</value>
  </data>
  <data name="GuySample" xml:space="preserve">
	<value>[DataContract]
	public class GuyViewModel : ContextObject, IExposable
	{
		[DataMember]
		public int Kisses
		{
			get { return Get(() =&gt; Kisses); }
			set { Set(() =&gt; Kisses, value); }
		}

		public void Expose()
		{
			var girlViewModel = Store.Get&lt;GirlViewModel&gt;();

			this[() =&gt; Kisses].PropertyChanged += (sender, args) =&gt;
			{
				Context.Get("KissGirl").RaiseCanExecuteChanged();
				Context.Get("KissGuy").RaiseCanExecuteChanged();
			};

			this[Context.Get("KissGirl")].CanExecute += (sender, args) =&gt; 
				args.CanExecute = Kisses &gt; girlViewModel.Kisses - 2;

			this[Context.Get("KissGirl")].Executed += (sender, args) =&gt; 
				girlViewModel.Kisses++;
		}
	}</value>
  </data>
  <data name="Inline" xml:space="preserve">
	<value>Inline</value>
  </data>
  <data name="InlineConverterSample" xml:space="preserve">
	<value>&lt;Grid.Resources&gt;
	&lt;InlineConverter x:Key="InlineConverter" Converting="InlineConverter_OnConverting"/&gt;
&lt;/Grid.Resources&gt;
&lt;TextBlock Text="{Binding Number, Converter={StaticResource InlineConverter}}"/&gt;

// Code Behind of View
private void InlineConverter_OnConverting(object sender, ConverterEventArgs e)
{
	e.ConvertedValue =
	string.Format("Title: {0} \nDataContext:\n{1} \nConverter Value: {2}",
		Title,
		DataContext,
		e.Value);
}</value>
  </data>
  <data name="Localizing" xml:space="preserve">
	<value>Localizing</value>
  </data>
  <data name="Make" xml:space="preserve">
	<value>Make</value>
  </data>
  <data name="One" xml:space="preserve">
	<value>One</value>
  </data>
  <data name="Play" xml:space="preserve">
	<value>Play</value>
  </data>
  <data name="PropertiesAndCommands" xml:space="preserve">
	<value>Properties and Commands</value>
  </data>
  <data name="Rack" xml:space="preserve">
	<value>Rack</value>
  </data>
  <data name="RackSample" xml:space="preserve">
	<value>&lt;Grid Rack.Rows="* 20\Auto * 2* */100 * *" Rack.Columns="* 50\*/100 *"&gt;
	&lt;!--...--&gt;
&lt;/Grid&gt;

equals

&lt;Grid&gt;
	&lt;Grid.RowDefinitions&gt;
		&lt;RowDefinition Height="*"/&gt;
		&lt;RowDefinition MinHeight="20" Height="Auto"/&gt;
		&lt;RowDefinition Height="*"/&gt;
		&lt;RowDefinition Height="2*"/&gt;
		&lt;RowDefinition Height="*" MaxHeight="100"/&gt;
		&lt;RowDefinition Height="*"/&gt;
		&lt;RowDefinition Height="*"/&gt;
	&lt;/Grid.RowDefinitions&gt;
	
	&lt;Grid.ColumnDefinitions&gt;
		&lt;ColumnDefinition Width="*"/&gt;
		&lt;ColumnDefinition MinWidth="100" Width="*" MaxWidth="300"/&gt;
		&lt;ColumnDefinition Width="*"/&gt;
	&lt;/Grid.ColumnDefinitions&gt;
	
	&lt;TextBlock
		Grid.Row="1"
		Grid.Column="1"
		Grid.RowSpan="1"
		Grid.ColumnSpan="2"&gt;
		
	&lt;!--...--&gt;
&lt;/Grid&gt;</value>
  </data>
  <data name="SmartState" xml:space="preserve">
	<value>Smart State</value>
  </data>
  <data name="SmartStateSample" xml:space="preserve">
	<value>To enable this feature:

1. Initialize Memory Box at startup

Possible, like this at App.xaml

&lt;Application
	x:Class="HelloAceApp"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	StartupUri="Views/WelcomeView.xaml"
	Startup="App_OnStartup"
	Exit="App_OnExit"&gt;
	&lt;Application.Resources&gt;
	
	&lt;/Application.Resources&gt;
&lt;/Application&gt;

	public partial class App
	{
		private void App_OnStartup(object sender, StartupEventArgs e)
		{
			//LocalizationSource.Wrap.ActiveManager = English.ResourceManager;
			
			Memory.ActiveBox = new Memory("AnyName", new KeyFileStorage());
		}

		private void App_OnExit(object sender, ExitEventArgs e)
		{
			Store.Snapshot();
		}
	}
	
2. Mark required View Models with DataContract attribute and Stored Properties with DataMamber attribute.
Like this

	[DataContract]
	public class AppViewModel : ContextObject, IExposable
	{
		[DataMember]
		public double Number
		{
			get { return Get(() =&gt; Number); }
			set { Set(() =&gt; Number, value); }
		}
		
3. Use Store markup extension or static class for Direct Injections of View Models

DataContext="{Store Key=viewModel:AppViewModel}"

var appViewModel = Store.Get&lt;AppViewModel&gt;();

4. Use Smart markup extension for storing of Smart Properties

	Width="{Smart 'Width, 800'}"
	Left="{Smart 'Left, NaN'}"
	
5. Now try to move and resize Window, change marked properties and then close app.

After restart Smart State will be restored...</value>
  </data>
  <data name="Switch" xml:space="preserve">
	<value>Switch</value>
  </data>
  <data name="SwitchConverterSample" xml:space="preserve">
	<value>&lt;Grid.Resources&gt;
	&lt;SwitchConverter x:Key="NumberSwitchConverter"&gt;
		&lt;Case Key="0" Value="{Localizing Zero}"/&gt;
		&lt;Case Key="1" Value="{Localizing One}"/&gt;
	&lt;/SwitchConverter&gt;
&lt;/Grid.Resources&gt;
&lt;TextBlock Text="{Binding Number, Converter={StaticResource NumberSwitchConverter}}"/&gt;</value>
  </data>
  <data name="Welcome" xml:space="preserve">
	<value>Welcome</value>
  </data>
  <data name="Zero" xml:space="preserve">
	<value>Zero</value>
  </data>
</root>